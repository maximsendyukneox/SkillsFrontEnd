@using SkillsDatabase
@using System
@using System.Threading;
@using System.ComponentModel.DataAnnotations
@using System.Linq
@inject NavigationManager nav

<MudDialog Class="pa-4">
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <EditForm EditContext="@editContext">
                    <DataAnnotationsValidator />
                    <MudGrid Spacing="1">
                        <MudItem xs="12">
                            <MudTextField uid="input_firstName" OnKeyUp="OnInputChanged" @bind-Value="model.FirstName" For="@(()=> model.FirstName)" Label="Vorname" Variant="Variant.Outlined"></MudTextField>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField uid="input_lastName" OnKeyUp="OnInputChanged" @bind-Value="model.LastName" For="@(()=> model.LastName)" Label="Nachname" Variant="Variant.Outlined"></MudTextField>
                        </MudItem>
                        <MudItem xs="12">
                            <MudDatePicker uid="input_birthday" @onkeyup="OnInputChanged" ReadOnly DateFormat="dd.MM.yyyy" Color="Color.Secondary" PickerOpened="OnDatePickerOpened" For="@(()=> model.Date)" Label="Geburtsdatum" @bind-Date="model.Date" MaxDate="DateTime.Now" Variant="Variant.Outlined" Editable="true" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudPaper Class="d-flex gap-2" Elevation="0">
                                <MudPaper Elevation="0" Class="d-flex flex-auto" Width="45%">
                                    <MudAutocomplete uid="input_skillName" T="string" Label="Kenntnis" Text="@newProficiency" Value="@newProficiency" ValueChanged="OnProficiencyChanged" SearchFunc="@SearchProficiency"
                                                     MaxItems="null" Variant="Variant.Outlined" Error="@isError" ErrorText="@error" CoerceText="true" CoerceValue="true" Style="" />
                                </MudPaper>
                                <MudPaper Elevation="0" Class="d-flex flex-auto" Width="45%" MaxWidth="45%">
                                    <MudSelect uid="input_skillLevel" Label="Stufe" Variant="Variant.Outlined" @bind-Value="proficiencyLevel">
                                        @foreach (ProficiencyLevel profLevel in Enum.GetValues(typeof(ProficiencyLevel)))
                                        {
                                            <MudSelectItem uid=@($"skillLevel_{profLevel}") Value="@profLevel">@profLevel</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudPaper>
                                <MudPaper Elevation="0" Class="d-flex flex-auto" Width="10%" Style=" padding: .4rem 0 0 0;">
                                    <MudIconButton uid="btn_addSkill" Style="height:3.3rem; width:100%;" Variant="Variant.Filled" Color="Color.Secondary" Icon="@Icons.Material.Filled.Add" @onclick="AddNewProficiency"></MudIconButton>
                                </MudPaper>                
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTable Items="@proficienciesDTO" Outlined="true" Style="padding:0;margin-top:1rem;">
                                <HeaderContent>
                                    <MudTh uid="table_column_skillName" Style="padding:10px 10px 10px 10px;">Kenntnis</MudTh>
                                    <MudTh uid="table_column_skillLevel" Style="padding:10px 10px 10px 10px;">Stufe</MudTh>
                                    <MudTh uid="table_column_action" Style="padding:10px 10px 10px 10px;"></MudTh>
                                </HeaderContent>
                                <RowTemplate Context="ctx">
                                    <MudTd uid=@($"table_skillName_{ctx.SkillName}") Style="padding:10px 10px 10px 10px;" DataLabel="Kenntnis">@ctx.SkillName</MudTd>
                                    <MudTd uid=@($"table_skillLevel_{ctx.SkillName}_{ctx.SkillLevel}") Style="padding:10px 10px 10px 10px;" DataLabel="Stufe">@ctx.SkillLevel</MudTd>
                                    <MudTd Style="padding:10px 10px 10px 10px;" DataLabel=""><MudIconButton uid=@($"table_btnDelete_{ctx.SkillName}") Icon="@Icons.Material.Filled.Clear" aria-label="delete" @onclick="@(()=>RemoveProficiency(ctx))" Color="Color.Error"></MudIconButton></MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudItem>
                        <MudItem xs="12">
                            <MudStack Row="true" Style="margin-top:1rem;">
                                <MudButton uid="btn_save" Style="width:8rem;" @onclick="SubmitHandler" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Secondary" Size="Size.Medium">Speichern</MudButton>
                                <MudButton uid="btn_cancel" Style="width:8rem;" @onclick="Cancel" Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Medium">Abbrechen</MudButton>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="12">
                            @* @if (isSuccess)
                            {
                                <MudAlert Style="margin-top: 1rem;" Severity="Severity.Success">Speichern erfolgreich</MudAlert>
                            } *@
                            @if (isException)
                            {
                                <MudAlert Severity="Severity.Error">@ErrorText</MudAlert>
                            }
                        </MudItem>
                    </MudGrid>
                </EditForm>
            </MudItem>
        </MudGrid>
    </DialogContent>
</MudDialog>


@code {
    private List<ProficiencyBaseDTO> proficienciesDTO;
    private string newProficiency = String.Empty;
    private ProficiencyLevel proficiencyLevel = ProficiencyLevel.Basic;
    private bool isError = false;
    private bool isException = false;
    private string error = "";
    private bool isSuccess = false;
    private string ErrorText { get; set; } = String.Empty;
    private SaveEmployeeForm model = new SaveEmployeeForm();
    private List<Proficiency> employeeProficiencies = new();
    private Employee employee = new();
    private List<string> skills = new();
    private List<ProficiencyBaseDTO> proficienciesToAdd = new();
    private List<Proficiency> proficienciesToDelete = new();
    private MudMessageBox deleteMessageBox { get; set; }
    private EditContext editContext { get; set; }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string Id { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        editContext = new EditContext(model);
        proficienciesDTO = new();
        employee = await Program.client.GetEmployeeAsync(Convert.ToInt32(Id));
        model.FirstName = employee.FirstName;
        model.LastName = employee.LastName;
        model.Date = employee.Birthday;

        employeeProficiencies = await Program.client.GetProficiencyAsync(employee.Id);

        skills = await Program.client.GetSkillsAsync();

        foreach (var p in employeeProficiencies)
        {
            proficienciesDTO.Add(new ProficiencyBaseDTO(p.Skill.Name, p.Level));
        }
        await base.OnInitializedAsync();
    }

    private void AddNewProficiency()
    {
        if (string.IsNullOrEmpty(newProficiency))
            return;

        if ((proficienciesDTO.Any(p => p.SkillName == newProficiency)))
        {
            error = "Kenntnis bereits hinzugefügt";
            isError = true;
            return;
        };

        proficienciesDTO.Add(new(newProficiency, proficiencyLevel));
        proficienciesToAdd.Add(new(newProficiency, proficiencyLevel));
        newProficiency = string.Empty;
    }

    private void RemoveProficiency(ProficiencyBaseDTO rowData)
    {
        proficienciesDTO.RemoveAll(p => p.SkillName == rowData.SkillName && p.SkillLevel == rowData.SkillLevel);
        proficienciesToAdd.RemoveAll(p => p.SkillName == rowData.SkillName && p.SkillLevel == rowData.SkillLevel);
        StateHasChanged();
        if (employeeProficiencies.Any(p => p.Skill.Name == rowData.SkillName && p.Level == rowData.SkillLevel))
        {
            proficienciesToDelete.Add(employeeProficiencies.Find(p => p.Skill.Name == rowData.SkillName && p.Level == rowData.SkillLevel));
        }
    }

    private async Task DeleteEmployee()
    {
        bool? result = await deleteMessageBox.Show();
        if (result == false)
            return;
        else
        {
            await Program.client.DeleteEmployeeAsync(employee.Id);
            nav.NavigateTo("/search-employee");
        }
        StateHasChanged();
    }

    private async void SubmitHandler()
    {
        isSuccess = false;
        if (editContext.Validate())
        {
            await SaveChanges(editContext);
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task SaveChanges(EditContext context)
    {
        try
        {
            await Program.client.UpdateEmployeeAsync(new EmployeeDTO(model.FirstName, model.LastName, model.Date!.Value.ToShortDateString(), Convert.ToInt32(Id)));
        }
        catch (Exception ex)
        {
            isException = true;
            ErrorText = ex.Message;
            StateHasChanged();
            return;
        }
        foreach (var proficiency in proficienciesToAdd)
        {
            await Program.client.CreateProficiencyAsync
            (
                new SkillsBackend.ProficiencyBaseDTO_withOwner
                (
                    proficiency.SkillName,
                    proficiency.SkillLevel,
                    employee.Id
                )
            );
        }
        foreach (var proficiency in proficienciesToDelete)
        {
            await Program.client.DeleteProficiencyAsync(proficiency.Id);
        }
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void OnInputChanged(KeyboardEventArgs e)
    {
        isSuccess = false;
        isException = false;
    }

    private void OnDatePickerOpened()
    {
        isSuccess = false;
        isException = false;
    }

    private void OnProficiencyChanged(string selectedProficiency)
    {
        newProficiency = selectedProficiency;
        isError = false;
    }

    private async Task<IEnumerable<string>> SearchProficiency(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return skills;
        return skills.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
