@page "/search-employee"
@using SkillsDatabase
@using SkillsBackend.Client
@using Microsoft.EntityFrameworkCore
@inject NavigationManager nav


    <MudTable Items="@Employees" Class="ma-2" Elevation="3" Striped="true" Filter="new Func<Employee,bool>(FilterFunc1)" @bind-SelectedItem="selectedEmployee">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Mitarbeitersuche</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Immediate="true" Placeholder="Suchen" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Vorname</MudTh>
            <MudTh>Nachname</MudTh>
            <MudTh>Geburtsdatum</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Vorname">@context.FirstName</MudTd>
            <MudTd DataLabel="Nachname">@context.LastName</MudTd>
            <MudTd DataLabel="Geburtsdatum">@context.Birthday.ToShortDateString()</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

@code {
    private string searchString1 = "";
    private Employee selectedEmployee = null;
    private List<Employee> Employees = new List<Employee>();
    SkillsDbContext context = Program.dbContextFactory.CreateDbContext();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            Employees = await Program.client.GetEmployeesAsync();

        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine(ex);
        }
    }

    private bool FilterFunc1(Employee employee) => FilterFunc(employee, searchString1);

    private bool FilterFunc(Employee employee, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (employee.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (employee.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    /*
     
    string searchQuery = String.Empty;
    string SearchQuery 
    {
        get => searchQuery;
        set
        {
            searchQuery = value;
            Task.Run(InputChanged);
            StateHasChanged();

        } 
    }
    List<Employee> searchResult = new List<Employee>();
    SkillsDbContext context = Program.dbContextFactory.CreateDbContext();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        //searchResult = context.VisibleEmployees.ToList();
        searchResult = await Program.client.GetEmployeesAsync();
        searchResult.Sort((emp1, emp2) => String.Compare(emp1.FirstName, emp2.FirstName));
    }

    private async Task InputChanged()
    {
        if (SearchQuery is null || String.Empty == SearchQuery)
        {
            searchResult = await Program.client.GetEmployeesAsync();
            searchResult.Sort((emp1, emp2) => String.Compare(emp1.FirstName, emp2.FirstName));
            return;
        }
        //searchResult = context.VisibleEmployees.Where(emp => emp.FirstName.StartsWith(searchQuery) || emp.LastName.StartsWith(searchQuery)).ToList();
        searchResult = await Program.client.GetEmployeeAsync(SearchQuery);
        searchResult.Sort((emp1, emp2) => String.Compare(emp1.FirstName, emp2.FirstName));
    }

    private int id;

    private void EditClick(Employee emp)
    {
        id = emp.Id;
        nav.NavigateTo("/edit-employee/"+id);
    }

    public void Dispose()
    {
        context.Dispose();
    }
     */
}
