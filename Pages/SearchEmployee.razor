@page "/search-employee"
@using SkillsDatabase
@using SkillsBackend.Client
@using Microsoft.EntityFrameworkCore
@inject NavigationManager nav


<MudTable Items="@Employees" Class="ma-2" Elevation="3" Loading="@loading" LoadingProgressColor="Color.Info" Striped="true" Filter="new Func<Employee,bool>(FilterFunc1)" @bind-SelectedItem="selectedEmployee">
        <ToolBarContent>
        <MudText uid="table_title" Typo="Typo.h6">Mitarbeitersuche</MudText>
            <MudSpacer />
            <MudTextField uid="table_searchField" @bind-Value="searchString1" Immediate="true" Placeholder="Suchen" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh uid="table_column_firstName">Vorname</MudTh>
            <MudTh uid="table_column_lastName">Nachname</MudTh>
            <MudTh uid="table_column_birthday">Geburtsdatum</MudTh>
            <MudTh uid="table_column_action">Aktion</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd uid=@($"table_firstName_{context.FirstName}") DataLabel="Vorname">@context.FirstName</MudTd>
            <MudTd uid=@($"table_lastName_{context.LastName}") DataLabel="Nachname">@context.LastName</MudTd>
            <MudTd uid=@($"table_birthday_{context.FirstName}") DataLabel="Geburtsdatum">@context.Birthday.ToShortDateString()</MudTd>
            <MudTd uid="btn_editEmployee" DataLabel="Stufe"><MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="edit employee" @onclick="@(()=>EditEmployee(context))"></MudIconButton></MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager uid ="table_pager"/>
        </PagerContent>
    </MudTable>

@code {
    private string searchString1 = "";
    private Employee selectedEmployee = null;
    private List<Employee> Employees = new List<Employee>();
    private bool loading = true;
    SkillsDbContext context = Program.dbContextFactory.CreateDbContext();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            Employees = await Program.client.GetEmployeesAsync();
            loading = false;
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine(ex);
        }
    }

    private bool FilterFunc1(Employee employee) => FilterFunc(employee, searchString1);

    private bool FilterFunc(Employee employee, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (employee.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (employee.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void EditEmployee(Employee employee)
    {
        nav.NavigateTo($"/edit-employee/{employee.Id}");
    }
}
