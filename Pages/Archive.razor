@page "/archive"

<PageTitle>neox AG Mitarbeiterarchiv</PageTitle>

@using SkillsBackend.Model
@using SkillsBackend.Client
@using Components
@using System.Globalization
@inject NavigationManager nav
@inject IDialogService DialogService



<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid Spacing="2" Class="mt-4 mud-theme-background">
        <MudItem xs="12">
            <MudHidden Breakpoint="Breakpoint.Xs">
                <MudPaper Style="" Elevation="3">
                    <MudStack Row="true" Class="pa-6 d-flex align-center">
                        <MudText uid="table_title" Typo="Typo.h6">Mitarbeiterarchiv</MudText>
                        <MudSpacer></MudSpacer>
                    </MudStack>
                </MudPaper>
            </MudHidden>
        </MudItem>
        @if (isException)
        {
            <MudItem xs="12">
                <MudAlert Severity="Severity.Error">@ErrorText</MudAlert>
            </MudItem>
        }
        <MudItem xs="12" Style="height: 100%;">
            <MudTable Items="@employees" Class="mud-theme-surface" RowsPerPage="25" Elevation="4" Loading="@loading" LoadingProgressColor="Color.Secondary" Dense="true" Filter="new Func<EmployeeDeleted,bool>(FilterFunc1)" @bind-SelectedItem="selectedEmployee">
                <ToolBarContent>
                    <MudTextField uid="table_searchField" @bind-Value="searchString1" Immediate="true" Placeholder="Suchen" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    <MudSpacer />
                </ToolBarContent>
                <HeaderContent>
                    <MudTh uid="table_column_firstName"><MudTableSortLabel SortBy="new Func<EmployeeDeleted, object>(x=>x.FirstName)">Vorname</MudTableSortLabel></MudTh>
                    <MudTh uid="table_column_lastName"><MudTableSortLabel SortBy="new Func<EmployeeDeleted, object>(x=>x.LastName)">Nachname</MudTableSortLabel></MudTh>
                    <MudTh uid="table_column_birthday">Geburtsdatum</MudTh>
                    <MudTh uid="table_column_action">Aktion</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd uid=@($"table_firstNameOf_{context.FirstName}_{context.LastName}_{context.Birthday.ToString("d",culture)}") DataLabel="Vorname">@context.FirstName</MudTd>
                    <MudTd uid=@($"table_lastNameOf_{context.FirstName}_{context.LastName}_{context.Birthday.ToString("d",culture)}") DataLabel="Nachname">@context.LastName</MudTd>
                    <MudTd uid=@($"table_birthdayOf_{context.FirstName}_{context.LastName}_{context.Birthday.ToString("d",culture)}") DataLabel="Geburtsdatum">@context.Birthday.ToString("d",culture)</MudTd>
                    <MudTd uid="btn_restoreEmployee" DataLabel="Aktion">
                        <MudTooltip Text="Wiederherstellen">
                            <MudIconButton uid="@($"btn_restoreEmployee_{context.FirstName}_{context.LastName}_{context.Birthday.ToString("d",culture)}")" @onclick="@(()=>OpenRestoreEmployeeDialog(context))" Size="Size.Medium" Color="Color.Secondary" Icon="@Icons.Material.Filled.Refresh" />
                        </MudTooltip>                      
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager uid="table_pager" />
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudContainer>

<MudHidden Style="display:none" Breakpoint="Breakpoint.Xs" Invert="true" IsHiddenChanged="SetDialogSize">
</MudHidden>




@code {

    private string searchString1 = "";
    private EmployeeDeleted selectedEmployee = null;
    private List<EmployeeDeleted> employees = new List<EmployeeDeleted>();
    private bool loading = true;
    private string ErrorText { get; set; } = String.Empty;
    private bool isException = false;
    private CultureInfo culture = new CultureInfo("de-DE");
    private bool isFullScreen = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            employees = await Program.Client.GetDeletedEmployeesAsync();
            loading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task OpenRestoreEmployeeDialog(EmployeeDeleted employeeToRestore)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, DisableBackdropClick = true, FullScreen = isFullScreen };
        var parameters = new DialogParameters { ["Id"] = employeeToRestore.Id.ToString() };
        var dialog = DialogService.Show<RestoreEmployee>("Mitarbeiter wiederherstellen", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await OnInitializedAsync();
        }
    }

    private bool FilterFunc1(EmployeeDeleted employee) => FilterFunc(employee, searchString1);

    private bool FilterFunc(EmployeeDeleted employee, string searchString)
    {
        string name = employee.FirstName + " " + employee.LastName;
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (employee.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (employee.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void SetDialogSize()
    {
        isFullScreen = !isFullScreen;
    }
}
