@page "/search-byskill"
@using SkillsDatabase
@using System.Linq
@using System.Globalization
@using System.Collections.Generic

<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid Spacing="2" Class="mt-4 mud-theme-background">
        <MudItem xs="12">
            <MudPaper Elevation="3" Class="pa-4 mud-theme-background">
                <MudGrid Spacing="2">
                    <MudItem xs="12">
                        <MudText uid="page_title" Typo="Typo.h6">Kenntnisbasierte Mitarbeitersuche</MudText>
                    </MudItem>
                    <MudItem xs="6" sm="5">
                        <MudAutocomplete uid="input_skillName" Margin="Margin.Dense" Style="" T="string" Label="Kenntnis" Text="@proficiency" Value="@proficiency" ValueChanged="OnProficiencyChanged" SearchFunc="@SearchProficiency"
                                         MaxItems="null" Variant="Variant.Outlined" Error="@isError" ErrorText="@error" CoerceValue="true" CoerceText="true" />
                    </MudItem>
                    <MudItem xs="6" sm="5">
                        <MudSelect uid="input_skillLevel" Margin="Margin.Dense" Class="d-flex flex-shrink-1" T="ProficiencyLevel" Value="proficiencyLevel" Label="Stufe" Variant="Variant.Outlined" ValueChanged="OnProficiencyLvlChanged">
                            @foreach (ProficiencyLevel profLevel in Enum.GetValues(typeof(ProficiencyLevel)))
                            {
                                <MudSelectItem Value="@profLevel">@profLevel</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="1">
                        <MudIconButton uid="btn_addSkill" Style="height:2.6rem; width:100%;" Variant="Variant.Filled" Color="Color.Secondary" Icon="@Icons.Material.Filled.Add" @onclick="AddProficiency"></MudIconButton>

                    </MudItem>
                    <MudItem xs="12" sm="1">
                        <MudIconButton uid="btn_searchEmployees" Style="height:2.6rem;width:100%" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Search" @onclick="SearchEmployees" Color="Color.Secondary"></MudIconButton>

                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12">
            <MudTable Items="@proficienciesDTO" Dense="true" Elevation="4" Class="pa-4">
                <HeaderContent>
                    <MudTh uid="table_column_skillName">Kenntnis</MudTh>
                    <MudTh uid="table_column_skillLevel">Stufe</MudTh>
                    <MudTh uid="table_column_action">Aktion</MudTh>
                </HeaderContent>
                <RowTemplate Context="ctx">
                    <MudTd uid=@($"table_skillName_{ctx.SkillName}") DataLabel="Kenntnis">@ctx.SkillName</MudTd>
                    <MudTd uid=@($"table_lastName_{ctx.SkillLevel}") DataLabel="Stufe">
                        <MudSelect Style="width:100%" Margin="Margin.Dense" T="ProficiencyLevel" Value="ctx.SkillLevel" Variant="Variant.Outlined" ValueChanged="@((selection)=>ChangeProficiency(ctx,selection))">
                            @foreach (ProficiencyLevel profLevel in Enum.GetValues(typeof(ProficiencyLevel)))
                            {
                                <MudSelectItem Value="@profLevel">@profLevel</MudSelectItem>
                            }
                        </MudSelect>
                    </MudTd>
                    <MudTd uid=@($"table_btnDelete_{ctx.SkillName}") DataLabel="Aktion"><MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" @onclick="@(()=>RemoveProficiency(ctx))" Color="Color.Error"></MudIconButton></MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
        @if (!hasSearchFoundEmployees)
           {
            <MudItem xs="12">
                  <MudAlert Severity="Severity.Warning">Keine Suchtreffer für die gewählten Mindestanforderungen, nächstbeste Mitarbeiter werden angezeigt  </MudAlert>
            </MudItem>
           }
        <MudItem xs="12">
            <MudTable Items="@tableData" Breakpoint="Breakpoint.None" Elevation="3" Class="" Loading="@loading" LoadingProgressColor="Color.Secondary" Filter="new Func<EmployeeTableData,bool>(FilterFunc1)">
                <ToolBarContent>
                    <MudText uid="table_title" Typo="Typo.h6">Suchergebnisse</MudText>
                    <MudSpacer />
                    <MudTextField uid="table_searchField" @bind-Value="searchString" Immediate="true" Placeholder="Suchen" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh uid="table_column_firstName">Vorname</MudTh>
                    <MudTh uid="table_column_lastName">Nachname</MudTh>
                    <MudTh uid="table_column_birthday">Geburtsdatum</MudTh>
                    <MudTh uid="table_column_skillName">Kenntnis</MudTh>
                    <MudTh uid="table_column_skillLevel">Stufe</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Style="vertical-align:top" uid=@($"table_firstName_{@context.FirstName}") DataLabel="Vorname">@context.FirstName</MudTd>
                    <MudTd Style="vertical-align:top" uid=@($"table_lastName_{@context.LastName}") DataLabel="Nachname">@context.LastName</MudTd>
                    <MudTd Style="vertical-align:top" uid=@($"table_birthday_{@context.FirstName}") DataLabel="Geburtsdatum">@context.Birthday.ToString("d",culture)</MudTd>
                    <MudTd DataLabel="Kenntnis">
                        @foreach (var skill in context.Skills)
                        {
                            <MudText Style="font-size: inherit;">@skill</MudText>
                        }
                    </MudTd>
                    <MudTd DataLabel="Stufe">
                        @foreach (var skillLevel in context.SkillLevels)
                        {
                            <MudText Style="font-size: inherit;">@skillLevel</MudText>
                        }
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    @if (isNoRecordsContentDisplayed)
                    {
                        <MudText uid="table_msgNoContent">Es konnten keine passenden Mitarbeiter gefunden werden</MudText>
                    }
                </NoRecordsContent>
                <PagerContent>
                    <MudTablePager uid="table_pager" />
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
 
    List<ProficiencyBaseDTO> proficienciesDTO = new();
    List<Proficiency> searchResult = new List<Proficiency>();
    private ProficiencyLevel proficiencyLevel = ProficiencyLevel.Basic;
    private string proficiency = "";
    private bool isError = false;
    private string error = "";
    private string searchString = "";
    private Employee selectedEmployee = null;
    private List<Employee> Employees = new List<Employee>();
    private bool loading = false;
    private List<string> proficiencies = new();
    private bool isNoRecordsContentDisplayed = false;
    private bool hasSearchFoundEmployees = true;
    List<EmployeeTableData> tableData = new List<EmployeeTableData>();
    private CultureInfo culture = new CultureInfo("de-DE");

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            proficiencies = await Program.client.GetSkillsAsync();
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine(ex);
        }
    }

    private void AddProficiency()
    {
        if (string.IsNullOrEmpty(proficiency))
            return;

        if ((proficienciesDTO.Any(p => p.SkillName == proficiency)))
        {
            error = "Kenntnis bereits hinzugefügt";
            isError = true;
            return;
        };
        proficienciesDTO.Add(new(proficiency, proficiencyLevel));
        proficiency = String.Empty;
        isError = false;
    }

    private void OnProficiencyLvlChanged(ProficiencyLevel selectedLevel)
    {
        proficiencyLevel = selectedLevel;
        isError = false;
    }

    private void OnProficiencyChanged(string selectedProficiency)
    {
        proficiency = selectedProficiency;
        isError = false;
    }

    private void RemoveProficiency(ProficiencyBaseDTO rowData)
    {
        proficienciesDTO.RemoveAll(dto => dto.SkillName == rowData.SkillName && dto.SkillLevel == rowData.SkillLevel);
    }

    private void ChangeProficiency(ProficiencyBaseDTO rowData, ProficiencyLevel selectedLevel)
    {
        //proficiencyLevel = selectedLevel;
        proficienciesDTO.Single(dto => dto.SkillName == rowData.SkillName).SkillLevel = selectedLevel;

    }

    private async Task<IEnumerable<string>> SearchProficiency(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return proficiencies;
        return proficiencies.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private bool FilterFunc1(EmployeeTableData entry) => FilterFunc(entry, searchString);

    private bool FilterFunc(EmployeeTableData entry, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (entry.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (entry.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void PrepareTableData (List<Proficiency> searchResult)
    {
        // unstrukturierte ergebnisdaten aus der suche strukturieren zum anzeigen in tabelle
        tableData.RemoveAll(data=>true);
        foreach (var employeeProficiency in searchResult)
        {
            // nachschauen ob mitarbeiter bereits in der liste zum anzeigen in der tabelle
            EmployeeTableData empl = tableData.Find(employee =>
                employee.FirstName == employeeProficiency.Owner.FirstName &&
                employee.LastName == employeeProficiency.Owner.LastName &&
                employee.Birthday == employeeProficiency.Owner.Birthday
            );

            if (empl == null)
            {
                //mitarbeiter noch nicht in der liste, füge neuen eintrag für ihn hinzu
                EmployeeTableData employeeWithSkills = new EmployeeTableData();
                employeeWithSkills.FirstName = employeeProficiency.Owner.FirstName;
                employeeWithSkills.LastName = employeeProficiency.Owner.LastName;
                employeeWithSkills.Birthday = employeeProficiency.Owner.Birthday;
                employeeWithSkills.Skills.Add(employeeProficiency.Skill.Name);
                employeeWithSkills.SkillLevels.Add(employeeProficiency.Level);
                tableData.Add(employeeWithSkills);
            }
            else
            {
                // mitarbeiter bereits in der liste, füge kenntnis und skillevel hinzu
                empl.Skills.Add(employeeProficiency.Skill.Name);
                empl.SkillLevels.Add(employeeProficiency.Level);
            }
        }
    }

    private async Task SearchEmployees()
    {
        hasSearchFoundEmployees = true;
        isNoRecordsContentDisplayed = true;
        loading = true;
        searchResult.RemoveAll(p => true);
        bool exit = false;
        var filteredEmployees = new List<Employee?>();
        do
        {
            filteredEmployees = await Program.client.ProficiencyBasedSearchEngine(proficienciesDTO);
            if (filteredEmployees.Count() == 0)
            {
                hasSearchFoundEmployees = false;
                filteredEmployees = await Program.client.ProficiencyBasedSearchFallback2(proficienciesDTO);
            }
            if (filteredEmployees.Count() == 0)
            {
                hasSearchFoundEmployees = false;
                foreach (var skill in proficienciesDTO)
                {
                    skill.SkillLevel -= 1;
                }
            }
            else
            {
                exit = true;
            }
        }
        while (!exit);

        foreach (var employee in filteredEmployees)
        {
            searchResult.AddRange(await Program.client.GetProficiencyAsync(employee.Id));
        }

        PrepareTableData(searchResult);
        loading = false;
    }
}
