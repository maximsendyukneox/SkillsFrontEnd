@page "/edit-employee/{Id}"
@inject NavigationManager nav
@using SkillsBackend.Model
@using System.Linq


<EditForm Model="@model" OnValidSubmit="SaveChanges">
    <DataAnnotationsValidator />
    <MudPaper Class="pa-8 ma-2" Elevation="3">
        <MudText uid="page_title" Typo="Typo.h6">Mitarbeiterdaten ändern</MudText>
        <MudDivider Style="margin-bottom: 2rem;" />
        <MudStack>
            <MudTextField uid="input_firstName" Style="width:20rem;" OnKeyUp="OnInputChanged" @bind-Value="model.FirstName" For="@(()=> model.FirstName)" Label="Vorname" Variant="Variant.Outlined"></MudTextField>
            <MudTextField uid="input_lastName" Style="width:20rem;" OnKeyUp="OnInputChanged" @bind-Value="model.LastName" For="@(()=> model.LastName)" Label="Nachname" Variant="Variant.Outlined"></MudTextField>
            <MudDatePicker uid="input_birthday" Placeholder="DD.MM.YYYY" DateFormat="dd.MM.yyyy" Color="Color.Info" ReadOnly PickerOpened="OnDatePickerOpened" For="@(()=> model.Date)" Style="width:20rem;" ErrorText="Kein valides Datumsformat" Label="Geburtsdatum" @bind-Date="model.Date" MaxDate="DateTime.Now" Variant="Variant.Outlined" Editable="true" />

            <MudGrid>
                <MudItem>
                     <MudAutocomplete uid="input_skillName" T="string" Label="Kenntnis" Text="@newProficiency" Value="@newProficiency" ValueChanged="OnProficiencyChanged" SearchFunc="@SearchProficiency"
                                     MaxItems="null" Style="width:20rem;" Variant="Variant.Outlined" Error="@isError" ErrorText="@error" CoerceText="true" CoerceValue="true" />
                </MudItem>
                <MudItem>
                     <MudSelect uid="input_skillLevel" Label="Stufe" Variant="Variant.Outlined" @bind-Value="proficiencyLevel" Style="width:20rem;">
                        @foreach (ProficiencyLevel profLevel in Enum.GetValues(typeof(ProficiencyLevel)))
                        {
                            <MudSelectItem Value="@profLevel">@profLevel</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem Style="padding:1.5rem 0 0 0;">
                    <MudFab uid="btn_addSkill" Color="Color.Info" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" @onclick="AddNewProficiency" />
                </MudItem>
            </MudGrid>

            <MudTable Items="@proficienciesDTO" Elevation="0" Style="padding:0; margin-top:1rem; width:45rem;">
                <HeaderContent>
                    <MudTh uid="table_column_skillName" Style="padding:10px 10px 10px 0;">Kenntnis</MudTh>
                    <MudTh uid="table_column_skillLevel" Style="padding:10px 10px 10px 0;">Stufe</MudTh>
                    <MudTh uid="table_column_action" Style="padding:10px 10px 10px 0;"></MudTh>
                </HeaderContent>
                <RowTemplate Context="ctx">
                    <MudTd uid=@($"table_skillName_{ctx.SkillName}") Style="padding:10px 10px 10px 0;" DataLabel="Kenntnis">@ctx.SkillName</MudTd>
                    <MudTd uid=@($"table_skillLevel_{ctx.SkillLevel}") Style="padding:10px 10px 10px 0;" DataLabel="Stufe">@ctx.SkillLevel</MudTd>
                    <MudTd uid=@($"table_btnDelete_{ctx.SkillName}") Style="padding:10px 10px 10px 0;" DataLabel=""><MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" @onclick="@(()=>RemoveProficiency(ctx))" Color="Color.Error"></MudIconButton></MudTd>
                </RowTemplate>
            </MudTable>
            <MudStack Row="true" Justify="Justify.FlexStart" Style="margin-top: 4rem;">
            <MudButton uid="btn_saveChanges" Style="width:8rem; border-radius: 1.1rem;" ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Medium">Speichern</MudButton>
            <MudButton uid="btn_deleteEmployee" Style="width:8rem; border-radius: 1.1rem;" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="DeleteEmployee" Size="Size.Medium">Löschen</MudButton>
            </MudStack>
            @if (isException)
            {
                <MudAlert uid="alert_exception" ShowCloseIcon="true" Severity="Severity.Error">@ErrorText</MudAlert>
            }
            @if (isSuccess)
            {
                <MudAlert uid="alert_success" Style="margin-top: 2rem;" Severity="Severity.Success">Speichern erfolgreich</MudAlert>
            }
        </MudStack>
    </MudPaper>
</EditForm>

<MudMessageBox uid="msgBox" @ref="deleteMessageBox">
    <TitleContent>
        <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
        <MudIcon Icon="@Icons.Material.Filled.Warning"/>
        <MudText Typo="Typo.h6">Achtung</MudText>
        </MudStack>
    </TitleContent>
    <MessageContent>
        <MudText uid="msgBox_message">Diesen Mitarbeiter wirklich löschen?</MudText>      
    </MessageContent>
    <YesButton>
        <MudButton uid="msgBox_btnDelete" Variant="Variant.Filled" Color="Color.Error">Löschen</MudButton>
    </YesButton>
    <NoButton>
        <MudButton uid="msgBox_btnCancel" Variant="Variant.Text">Abbrechen</MudButton>
    </NoButton>
</MudMessageBox>

@code {

    private List<ProficiencyDTO> proficienciesDTO;
    private string newProficiency = String.Empty;
    private ProficiencyLevel proficiencyLevel = ProficiencyLevel.Basic;
    private bool isError = false;
    private bool isException = false;
    private string error = "";
    private bool isSuccess = false;
    private string ErrorText { get; set; } = String.Empty;
    private SaveEmployeeForm model = new SaveEmployeeForm();
    private List<Proficiency> employeeProficiencies = new();
    private Employee employee;
    private List<string> skills = new();
    private List<ProficiencyDTO> proficienciesToAdd = new();
    private List<Proficiency> proficienciesToDelete = new();
    private MudMessageBox deleteMessageBox { get; set; }

    [Parameter]
    public string Id { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        proficienciesDTO = new();
        employee = await Program.Client.GetEmployeeAsync(Convert.ToInt32(Id));
        model.FirstName = employee.FirstName;
        model.LastName = employee.LastName;
        model.Date = employee.Birthday;

        employeeProficiencies = await Program.Client.GetProficiencyAsync(employee.Id);

        skills = await Program.Client.GetSkillsAsync();

        foreach (var p in employeeProficiencies)
        {
            proficienciesDTO.Add(new ProficiencyDTO(p.Skill.Name, p.Level));
        }
        await base.OnInitializedAsync();
    }

    private void AddNewProficiency()
    {
        if (string.IsNullOrEmpty(newProficiency))
            return;

        if ((proficienciesDTO.Any(p => p.SkillName == newProficiency)))
        {
            error = "Kenntnis bereits hinzugefügt";
            isError = true;
            return;
        };

        proficienciesDTO.Add(new(newProficiency, proficiencyLevel));
        proficienciesToAdd.Add(new(newProficiency, proficiencyLevel));
        newProficiency = string.Empty;
    }

    private void RemoveProficiency(ProficiencyDTO rowData)
    {
        proficienciesDTO.RemoveAll(p => p.SkillName == rowData.SkillName && p.SkillLevel == rowData.SkillLevel);
        proficienciesToAdd.RemoveAll(p => p.SkillName == rowData.SkillName && p.SkillLevel == rowData.SkillLevel);
        StateHasChanged();
        if (employeeProficiencies.Any(p => p.Skill.Name == rowData.SkillName && p.Level == rowData.SkillLevel))
        {
            proficienciesToDelete.Add(employeeProficiencies.Find(p => p.Skill.Name == rowData.SkillName && p.Level == rowData.SkillLevel));
        }
    }

    private async Task DeleteEmployee()
    {
        bool? result = await deleteMessageBox.Show();
        if (result == false)
            return;
        else
        {
            await Program.Client.DeleteEmployeeAsync(employee.Id);
            nav.NavigateTo("/search-employee");
        }
        StateHasChanged();
    }

    private async Task SaveChanges(EditContext context)
    {  
        try
        {                    
            await Program.Client.UpdateEmployeeAsync(new EmployeeDTO(model.FirstName, model.LastName, model.Date!.Value.ToShortDateString()) { Id = Convert.ToInt32(Id) });
        }
        catch (ArgumentException ex)
        {
            isException = true;
            ErrorText = ex.Message;
            return;
        }
        foreach (var proficiency in proficienciesToAdd)
        {
            await Program.Client.CreateProficiencyAsync
            (
                new ProficiencyDTO
                (
                    proficiency.SkillName,
                    proficiency.SkillLevel
                ) { OwnerId = employee.Id }
            );
        }
        foreach (var proficiency in proficienciesToDelete)
        {
            await Program.Client.DeleteProficiencyAsync(proficiency.Id);
        }
        await OnInitializedAsync();
        isSuccess = true;
    }

    private void OnInputChanged(KeyboardEventArgs e)
    {
        isSuccess = false;
    }

    private void OnDatePickerOpened()
    {
        isSuccess = false;
    }

    private void OnProficiencyChanged(string selectedProficiency)
    {
        newProficiency = selectedProficiency;
        isError = false;
    }

    private async Task<IEnumerable<string>> SearchProficiency(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return skills;
        return skills.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
