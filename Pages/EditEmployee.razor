@page "/edit-employee/{Id}"
@implements IDisposable
@inject NavigationManager nav
@using SkillsDatabase
@using Microsoft.Data.SqlClient
<h3>Mitarbeiterdaten ändern</h3>

<div>
    <table>
        <tr>
            <td>Vorname:</td>
            <td>
                <input type="text" name="fname" @bind-value="fname" @bind-value:event="oninput" />
            </td>
        </tr>
        <tr>
            <td>Nachname:</td>
            <td>
                <input type="text" name="lname" @bind-value="lname" @bind-value:event="oninput" />
            </td>
        </tr>
        <tr>
            <td>Geburtsdatum:</td>
            <td>
                @dateOfBirth.ToShortDateString()
            </td>
        </tr>
    </table>
</div>

<div>
    <table>
        <tr>
            <td><button name="deleteemployee" @onclick="DeleteEmployee_Click">Mitarbeiter löschen</button></td>
        </tr>
    </table>
</div>

<div>
    <table>
        <tr>
            <td>

                <table>
                    
                    <tbody>
                        <tr>
                            <td>
                                <SkillsComponent proficienciesDTO="proficiencyDTOs" />
                            </td>
                            <td>
                                <table>
                                    <tr/>
                                    @foreach (var pDTO in proficiencyDTOs)
                                    {
                                        <tr>
                                            <td>
                                                <button name="delete" @onclick="() => DeleteProficiency(pDTO)">
                                                    <img src="./Images/Icons/delete.png" > @*<a target="_blank" href="https://icons8.com/icon/102550/remove">Delete</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>*@
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </td>
                            <td>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </td>
            <td>
                <table>
                    <tr>
                        <td><button name="addskill" @onclick="AddProficiency">Kenntnis hinzufügen</button></td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
</div>

<div>
    <p style="color:red">@Error</p>
</div>

<div>
    <button name="savechanges" @onclick="SaveChanges">Speichern</button>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    //SkillsDbContext context;
    Employee employee;

    List<ProficiencyBaseDTO> proficiencyDTOs = new();
    List<Proficiency> proficiencies;

    string fname { get; set; }
    string lname { get; set; }

    DateTime dateOfBirth { get; set; }

    SkillsDbContext context;

    private string Error { get; set; } = String.Empty;


    protected async override Task OnInitializedAsync()
    {
        context = Program.dbContextFactory.CreateDbContext();
        employee = await Program.client.GetEmployeeAsync(Convert.ToInt32(Id));

        fname = employee.FirstName;
        lname = employee.LastName;
        dateOfBirth = employee.Birthday;
        proficiencies = await Program.client.GetProficiencyAsync(employee.Id);


        foreach(var p in proficiencies)
        {
            proficiencyDTOs.Add(new ProficiencyBaseDTO(p.Skill.Name, p.Level));
        }

        await base.OnInitializedAsync();
    }

    private async Task UpdateCredentials()
    {
        await Program.client.UpdateEmployeeAsync(new EmployeeDTO(fname, lname, dateOfBirth.ToShortDateString(), Convert.ToInt32(Id)));

    }

    private void DeleteProficiency(ProficiencyBaseDTO pDTO)
    {
        context.VisibleProficiencies.Remove(context.VisibleProficiencies.Single(prof => prof.Skill.Name == pDTO.SkillName && prof.Owner == employee));
        proficiencyDTOs.Remove(proficiencyDTOs.Single(p => p.SkillName == pDTO.SkillName));
    }

    private async Task DeleteEmployee_Click()
    {
        await Program.client.DeleteEmployeeAsync(employee.Id);
        nav.NavigateTo("/search-employee");
    }

    private bool skillAdded = false;



    private void AddProficiency()
    {
        proficiencyDTOs.Add(
            new ProficiencyBaseDTO(
                String.Empty,
                ProficiencyLevel.Basic
            )
        );


        skillAdded = true;
    }

    private async Task SaveChanges()
    {
        try
        {
            InputChecker.ValidateName(fname);
            InputChecker.ValidateName(lname);
        }
        catch(ArgumentException ex)
        {
            if (ex.Message == "Special characters are not allowed")
            {
                Error = " Sonderzeichen im Namen sind nicht erlaubt!";
                return;
            }
            else if (ex.Message == "The name must not be empty")
            {
                Error = " Weder Vorname noch Nachname darf leer sein!";
                return;
            }
            else throw;
        }

        await UpdateCredentials();

        try
        {
            foreach(var prof in proficiencyDTOs)
            {
                InputChecker.ValidateSkill(prof.SkillName);
            }
        }
        catch(ArgumentException ex)
        {
        if (ex.Message == "The name must not be empty")
            {
                Error = " Kenntnisnamen dürfen nicht leer sein";
                return;
            }
            else throw;
        }
        //TODO: insert Proficienty-Update-Methods calls here 

        nav.NavigateTo("edit-employee/" + Id);
    }

    public void Dispose()
    {
        if (skillAdded)
        {
            context.CreateProficiency(proficiencyDTOs.Last().SkillName, proficiencyDTOs.Last().SkillLevel, employee, true);
            proficiencies.Add(context.VisibleProficiencies.Single(p => p.Owner == employee && p.Skill.Name == proficiencyDTOs.Last().SkillName));
            
        }
        foreach(var pDTO in proficiencyDTOs)
        {
            Proficiency proficiency = proficiencies[proficiencyDTOs.IndexOf(pDTO)];
            //context.RenameSkill(context.Skills.Single(s => s == proficiency.Skill),pDTO.SkillName);
            context.ModifyProficiency(context.VisibleProficiencies.Single(p => p == proficiency), pDTO.SkillLevel);
        }
        
    }
}
