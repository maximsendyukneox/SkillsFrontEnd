@page "/create-employee"
@using SkillsDatabase
@using System
@using System.Threading;
@using System.ComponentModel.DataAnnotations
@using System.Linq

<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />
<MudPaper Class="pa-8 ma-2" Elevation="3">
    <MudText uid="page_title" Typo="Typo.h6">Mitarbeiter erfassen</MudText>
    <MudDivider Style="margin-bottom: 2rem;"/>
    <MudStack>
        <MudTextField uid="input_firstName" Style="width:20rem;" OnKeyUp="OnInputChanged" @bind-Value="model.FirstName" For="@(()=> model.FirstName)" Label="Vorname" Variant="Variant.Outlined"></MudTextField>
            <MudTextField uid="input_lastName" Style="width:20rem;" OnKeyUp="OnInputChanged" @bind-Value="model.LastName" For="@(()=> model.LastName)" Label="Nachname" Variant="Variant.Outlined"></MudTextField>
            <MudDatePicker uid="input_birthday" DateFormat="dd.MM.yyyy" Color="Color.Info" PickerOpened="OnDatePickerOpened" For="@(()=> model.Date)" Style="width:20rem;" ErrorText="Kein valides Datumsformat" Label="Geburtsdatum" @bind-Date="model.Date" MaxDate="DateTime.Now" Variant="Variant.Outlined" Editable="true" />
    <MudGrid>
       <MudItem>
            <MudAutocomplete uid="input_skillName" T="string" Label="Kenntnis" Text="@newProficiency" Value="@newProficiency" ValueChanged="OnProficiencyChanged" SearchFunc="@SearchProficiency"
                                     MaxItems="null" Style="width:20rem;" Variant="Variant.Outlined" Error="@isError" ErrorText="@error" CoerceText="true" CoerceValue="true" />
       </MudItem>
       <MudItem >
             <MudSelect uid="input_skillLevel" Label="Stufe" Variant="Variant.Outlined" @bind-Value="proficiencyLevel" Style="width:20rem;" >
                @foreach(ProficiencyLevel profLevel in Enum.GetValues(typeof(ProficiencyLevel)))
                {
                  <MudSelectItem Value="@profLevel">@profLevel</MudSelectItem>
                }
            </MudSelect>
       </MudItem>
            <MudItem Style="padding:1.5rem 0 0 0;">
                <MudFab uid="btn_addSkill" Color="Color.Info" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" @onclick="AddNewProficiency" />
            </MudItem>    
    </MudGrid>

    <MudTable Items="@proficienciesDTO" Elevation="0" Style="padding:0; margin-top:1rem; width:45rem;">
        <HeaderContent>
                    <MudTh uid="table_column_skillName" Style="padding:10px 10px 10px 10px;">Kenntnis</MudTh>
                    <MudTh uid="table_column_skillLevel" Style="padding:10px 10px 10px 10px;">Stufe</MudTh>
                    <MudTh uid="table_column_action" Style="padding:10px 10px 10px 10px;"></MudTh>
        </HeaderContent>
        <RowTemplate Context="ctx">
                    <MudTd uid=@($"table_skillName_{ctx.SkillName}") Style="padding:10px 10px 10px 10px;" DataLabel="Kenntnis">@ctx.SkillName</MudTd>
                    <MudTd uid=@($"table_skillLevel_{ctx.SkillLevel}") Style="padding:10px 10px 10px 10px;" DataLabel="Stufe">@ctx.SkillLevel</MudTd>
                    <MudTd uid=@($"table_btnDelete_{ctx.SkillName}") Style="padding:10px 10px 10px 10px;" DataLabel=""><MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" @onclick="@(()=>RemoveProficiency(ctx))" Color="Color.Error"></MudIconButton></MudTd>
                </RowTemplate>
    </MudTable>
            <MudButton uid="btn_save" Style="width:8rem; margin-top: 4rem;border-radius: 1.1rem;" @onclick="SubmitHandler" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Medium">Speichern</MudButton>
        @if (isException)
        {
          <MudAlert  Severity="Severity.Error">@ErrorText</MudAlert>
        }
        @if (isSuccess)
        {
          <MudAlert Style="margin-top: 2rem;"  Severity="Severity.Success">Speichern erfolgreich</MudAlert>
        }
    </MudStack>
</MudPaper>
</EditForm>


@code {
    List<ProficiencyBaseDTO> proficienciesDTO = new();
    private string newProficiency = String.Empty;
    private ProficiencyLevel proficiencyLevel = ProficiencyLevel.Basic;
    private bool isError = false;
    private bool isException = false;
    private string error = "";
    private bool isSuccess = false;
    private string ErrorText { get; set; } = String.Empty;
    SaveEmployeeForm model = new SaveEmployeeForm();
    List<Proficiency> tableData = new();
    List<string> proficiencies = new();
    private EditContext editContext { get; set; }


    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(model);
        await base.OnInitializedAsync();
        try
        {
            proficiencies = await Program.client.GetSkillsAsync();
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async void SubmitHandler()
    {
        isSuccess = false;
        if (editContext.Validate())
        {
            await SaveEmployee();
        }
        StateHasChanged();
    }

    private async Task<IEnumerable<string>> SearchProficiency(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return proficiencies;
        return proficiencies.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void OnProficiencyChanged(string selectedProficiency)
    {
        newProficiency = selectedProficiency;
        isError = false;
    }

    private void AddNewProficiency()
    {
        if (string.IsNullOrEmpty(newProficiency))
            return;

        if ((proficienciesDTO.Any(p => p.SkillName == newProficiency)))
        {
            error = "Kenntnis bereits hinzugefügt";
            isError = true;
            return;
        };

        proficienciesDTO.Add(new(newProficiency, proficiencyLevel));
        newProficiency = string.Empty;
        isError = false;
    }

    private void RemoveProficiency(ProficiencyBaseDTO rowData)
    {
        proficienciesDTO.RemoveAll(dto => dto.SkillName == rowData.SkillName && dto.SkillLevel == rowData.SkillLevel);
    }

    private void OnInputChanged(KeyboardEventArgs e)
    {
        isSuccess = false;
    }

    private void OnDatePickerOpened()
    {
        isSuccess = false;
    }

    private async Task SaveEmployee()
    {
        isError = false;
        isException = false;
        Employee employee = null;
        try
        {
            employee = await Program.client.CreateEmployeeAsync(new EmployeeDTO_keyless(model.FirstName.Trim(), model.LastName.Trim(), model.Date!.Value.ToShortDateString(),true));
        }
        catch(Exception ex)
        {
            isException = true;
            ErrorText = ex.Message;
            return;
        }
        foreach (var proficiencyDTO in proficienciesDTO)
        {
            await Program.client.CreateProficiencyAsync(new SkillsBackend.ProficiencyBaseDTO_withOwner(proficiencyDTO.SkillName, proficiencyDTO.SkillLevel, employee.Id));
        }
        isSuccess = true;
        model = new SaveEmployeeForm();
        editContext = new EditContext(model);
        proficiencyLevel = ProficiencyLevel.Basic;
        proficienciesDTO.Clear();
        //StateHasChanged();
    }

}
 