@page "/create-employee"
@using SkillsDatabase
@using System
@using System.Threading;
@using System.ComponentModel.DataAnnotations

<EditForm Model="@model" OnValidSubmit="SaveEmployee">
    <DataAnnotationsValidator />
<MudPaper Class="pa-8 ma-2" Elevation="3">
    <MudText Typo="Typo.h6">Mitarbeiter erfassen</MudText>
    <MudDivider Style="margin-bottom: 2rem;"/>
    <MudStack>
        <MudTextField Style="width:20rem;" OnKeyUp="onInputChanged" @bind-value="model.FirstName" For="@(()=> model.FirstName)" Label="Vorname" Variant="Variant.Outlined"></MudTextField>
        <MudTextField Style="width:20rem;" OnKeyUp="onInputChanged" @bind-Value="model.LastName" For="@(()=> model.LastName)" Label="Nachname" Variant="Variant.Outlined"></MudTextField>
        <MudDatePicker Color="Color.Info" PickerOpened="onDatePickerOpened" Style="width:20rem;" ErrorText="Kein valides Datumsformat" Label="Geburtsdatum" @bind-Date="date" MaxDate="DateTime.Now" Variant="Variant.Outlined" Editable="true" />
        <MudText Style="margin-top: 2rem;" Typo="Typo.h6">Kenntnisse</MudText>
        @foreach (var proficiency in proficienciesDTO)
        {
        <MudList Clickable="false" DisableGutters="true" DisablePadding="true">
            <MudListItem Text=@proficiency.SkillName />
            <MudDivider/>        
        </MudList>   
        }
        <MudGrid>
            <MudItem >
                <MudTextField Style="width:20rem;" @bind-Value="newProficiency" @onkeyup="AddNewProficiencyOnEnter" TextUpdateSuppression="false" Label="Kenntnis hinzufügen" Variant="Variant.Text"></MudTextField>
            </MudItem>
            <MudItem Style="padding:20px 0 0 0;">
                <MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" @onclick="AddNewProficiency" />
            </MudItem>
        </MudGrid>
            <MudButton Style="width:8rem; margin-top: 4rem;" ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Medium">Speichern</MudButton>
            @if (isError)
            {
            <MudAlert ShowCloseIcon="true"  Severity="Severity.Error">@ErrorText</MudAlert>
            }
            @if (isSuccess)
            {
                <MudAlert Style="margin-top: 2rem;"  Severity="Severity.Success">Speichern erfolgreich</MudAlert>
            }
    </MudStack>
</MudPaper>
</EditForm>


@code {
    List<ProficiencyBaseDTO> proficienciesDTO = new();
    private string newProficiency;
    private List<string> proficiencies = new List<string>();
    private DateTime? date = DateTime.Today;
    private bool isError = false;
    private bool isSuccess = false;
    private string ErrorText { get; set; } = String.Empty;
    SaveEmployeeForm model = new SaveEmployeeForm();


    private void AddNewProficiency()
    {
        if (!string.IsNullOrWhiteSpace(newProficiency))
        {   
            proficienciesDTO.Add(new(newProficiency, ProficiencyLevel.Basic));
        }
        newProficiency = string.Empty;
    }

    private void AddNewProficiencyOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddNewProficiency();
        }
    }

    private void onInputChanged(KeyboardEventArgs e)
    {
        isSuccess = false;
    }

    private void onDatePickerOpened()
    {
        isSuccess = false;
    }


    private async Task SaveEmployee(EditContext context)
    {
        StateHasChanged();
        SkillsDbContext dbContext = Program.dbContextFactory.CreateDbContext();
        Employee employee = null;
        try
        {
            employee = dbContext.CreateEmployee(model.FirstName, model.LastName, date!.Value, false);
        }
        catch(ArgumentException ex)
        {
            isError = true;
            ErrorText = ex.Message;
            return;
        }
        foreach (var proficiencyDTO in proficienciesDTO)
        {
            dbContext.CreateProficiency(proficiencyDTO.SkillName, proficiencyDTO.SkillLevel, employee, false);
        }
        await dbContext.SaveChangesAsync();
        isSuccess = true;
        model = new SaveEmployeeForm();
        date = DateTime.Today;
        proficienciesDTO.Clear();
    }
    
}
 