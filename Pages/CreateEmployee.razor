  @page "/create-employee"
@using SkillsDatabase
@using System
@inject NavigationManager nav

<h3>Mitarbeiter erfassen</h3>

<div>
    <table>
        <tr>
            <td>Vorname:</td>
            <td>
                <input type="text"  name="fname" @bind-value="FirstName" @bind-value:event="oninput"/>
            </td>
        </tr>
        <tr>
            <td>Nachname:</td>
            <td>
                <input type="text" name="lname" @bind-value="LastName" @bind-value:event="oninput" />
            </td>
        </tr>
        <tr>
            <td>Geburtsdatum:</td>
            <td>
                <input type="date" name="dateofbirth" @bind-value="DateOfBirth" @bind-value:event="oninput" />
            </td>
        </tr> 
    </table>
</div>

<div>
    <p style="color:red">@Error</p>
</div>

<div>
    <table>
        <tr>
            <td>
                <SkillsComponent proficienciesDTO=@proficienciesDTO />
            </td>
            <td>
                <table>
                    <tr>
                        <td><button name="addskill" @onclick="AddSkill">Neuen Skill hinzufügen</button></td>
                    </tr>
                    <tr>
                        <td><button name="save" @onclick="SaveEmployee">Speichern</button></td>
                    </tr>
                    <tr>
                        <td><button name="abort" @onclick="DiscardChanges">Abbrechen</button></td>
                    </tr>
                    
                </table>
            </td>
        </tr>
    </table>
</div>


@code {
    List<ProficiencyBaseDTO> proficienciesDTO = new();
    string FirstName = string.Empty;
    string LastName = string.Empty;
    DateTime DateOfBirth = new DateTime(2000, 1, 1);

    private string Error { get; set; } = String.Empty;

    private void AddSkill()
    {
        Console.WriteLine("AddSkill: " + FirstName + ", " + LastName + ", " + DateOfBirth);
        proficienciesDTO.Add(new(string.Empty, ProficiencyLevel.Basic));
    }

    private async Task SaveEmployee()
    {
        Console.WriteLine(FirstName + LastName + DateOfBirth);

        SkillsDbContext context = Program.dbContextFactory.CreateDbContext();

        try
        {
            InputChecker.ValidateName(FirstName);
            InputChecker.ValidateName(LastName);
            InputChecker.ValidateDateOfBirth(DateOfBirth);
        }
        catch(ArgumentException ex)
        {
            if (ex.Message == "Special characters are not allowed")
            {
                Error = " Sonderzeichen im Namen sind nicht erlaubt!";
                return;
            }
            else if (ex.Message == "The date of birth must not be in the future")
            {
                Error = " Das Geburtsdatum muss nicht in der Zukunft liegen!";
                return;
            }
            else if (ex.Message == "The name must not be empty")
            {
                Error = " Weder Vorname noch Nachname darf leer sein!";
                return;
            }
            else throw;
        }

        EmployeeDTO_keyless employee = new EmployeeDTO_keyless(FirstName, LastName, DateOfBirth.ToShortDateString());
        Employee? ourEmployee = await Program.client.CreateEmployeeAsync(employee);


        var skills = new List<string>();
        foreach (var proficiencyDTO in proficienciesDTO)
        {
            skills.Add(proficiencyDTO.SkillName);
        }
        try
        {
            InputChecker.FindSkillDuplicates(skills);
        }
        catch(ArgumentException ex)
        {
            if (ex.Message == "One employee may not have the same skill twice")
            {
                Error = " Eine oder mehrere Kenntnisse wurden verdoppelt Eingegeben";
                return;
            }
            else throw;
        }
        foreach (var proficiencyDTO in proficienciesDTO)
        {
            try
            {
                InputChecker.ValidateSkill(proficiencyDTO.SkillName);

                
                
            }
            catch(ArgumentException ex)
            {
                if (ex.Message == "The name must not be empty")
                {
                    Error = " Keine Kenntnis darf leer sein!";
                    return;
                }
                else throw;
            }
            await Program.client.CreateProficiencyAsync
            (
                new SkillsBackend.ProficiencyBaseDTO_withOwner
                (
                    proficiencyDTO.SkillName,
                    proficiencyDTO.SkillLevel,
                    ourEmployee.Id
                )
            );
        }

        
        nav.NavigateTo("edit-employee/" + ourEmployee.Id);
    }
    private void DiscardChanges()
    {
        nav.NavigateTo("/");
    }
}
 